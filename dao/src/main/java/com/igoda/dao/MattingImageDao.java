package com.igoda.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.igoda.dao.entity.MattingImage;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MATTING_IMAGE".
*/
public class MattingImageDao extends AbstractDao<MattingImage, Long> {

    public static final String TABLENAME = "MATTING_IMAGE";

    /**
     * Properties of entity MattingImage.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Url = new Property(1, String.class, "url", false, "URL");
        public final static Property Value = new Property(2, String.class, "value", false, "VALUE");
        public final static Property Ext = new Property(3, String.class, "ext", false, "EXT");
        public final static Property CreateTime = new Property(4, String.class, "createTime", false, "CREATE_TIME");
        public final static Property Name = new Property(5, String.class, "name", false, "NAME");
        public final static Property SdPath = new Property(6, String.class, "sdPath", false, "SD_PATH");
        public final static Property DownloadState = new Property(7, int.class, "downloadState", false, "DOWNLOAD_STATE");
    }


    public MattingImageDao(DaoConfig config) {
        super(config);
    }
    
    public MattingImageDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MATTING_IMAGE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"URL\" TEXT," + // 1: url
                "\"VALUE\" TEXT," + // 2: value
                "\"EXT\" TEXT," + // 3: ext
                "\"CREATE_TIME\" TEXT," + // 4: createTime
                "\"NAME\" TEXT," + // 5: name
                "\"SD_PATH\" TEXT," + // 6: sdPath
                "\"DOWNLOAD_STATE\" INTEGER NOT NULL );"); // 7: downloadState
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MATTING_IMAGE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MattingImage entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(2, url);
        }
 
        String value = entity.getValue();
        if (value != null) {
            stmt.bindString(3, value);
        }
 
        String ext = entity.getExt();
        if (ext != null) {
            stmt.bindString(4, ext);
        }
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(5, createTime);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(6, name);
        }
 
        String sdPath = entity.getSdPath();
        if (sdPath != null) {
            stmt.bindString(7, sdPath);
        }
        stmt.bindLong(8, entity.getDownloadState());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MattingImage entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(2, url);
        }
 
        String value = entity.getValue();
        if (value != null) {
            stmt.bindString(3, value);
        }
 
        String ext = entity.getExt();
        if (ext != null) {
            stmt.bindString(4, ext);
        }
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(5, createTime);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(6, name);
        }
 
        String sdPath = entity.getSdPath();
        if (sdPath != null) {
            stmt.bindString(7, sdPath);
        }
        stmt.bindLong(8, entity.getDownloadState());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public MattingImage readEntity(Cursor cursor, int offset) {
        MattingImage entity = new MattingImage( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // url
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // value
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // ext
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // createTime
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // name
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // sdPath
            cursor.getInt(offset + 7) // downloadState
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MattingImage entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUrl(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setValue(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setExt(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCreateTime(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSdPath(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDownloadState(cursor.getInt(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MattingImage entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MattingImage entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MattingImage entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
